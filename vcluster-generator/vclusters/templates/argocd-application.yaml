{{- $root := . -}}

{{- /* Calculate the total number of combinations */ -}}
{{- $totalCombinations := mul (len .Values.possibleValues.organizations) (len .Values.possibleValues.clouds) (len .Values.possibleValues.regions) (len .Values.possibleValues.environments) (len .Values.possibleValues.versions) -}}

{{- /* Determine how many configmaps to generate */ -}}
{{- $configmapsToGenerate := $totalCombinations -}}
{{- if not .Values.generateAllCombinations -}}
  {{- $configmapsToGenerate = min $totalCombinations .Values.maxClusters -}}
{{- end -}}

{{- /* Create a list of letters for group naming */ -}}
{{- $letters := list "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" -}}

{{- /* Create a map to track the count of clusters for each environment-version group */ -}}
{{- $groupCounts := dict -}}

{{- /* Track current index */ -}}
{{- $globalIndex := 0 -}}

{{- /* Generate nested loops for all combinations */ -}}
{{- range $orgIndex, $org := .Values.possibleValues.organizations -}}
  {{- range $cloudIndex, $cloud := $root.Values.possibleValues.clouds -}}
    {{- range $regionIndex, $region := $root.Values.possibleValues.regions -}}
      {{- range $envIndex, $env := $root.Values.possibleValues.environments -}}
        {{- range $versionIndex, $version := $root.Values.possibleValues.versions -}}
          {{- /* Only generate if within the limit */ -}}
          {{- if lt $globalIndex $configmapsToGenerate -}}

            {{- /* Create a key for this environment-version combination */ -}}
            {{- $baseKey := printf "%s-%s" $env $version -}}

            {{- /* Initialize counter if it doesn't exist */ -}}
            {{- if not (hasKey $groupCounts $baseKey) -}}
              {{- $_ := set $groupCounts $baseKey 0 -}}
            {{- end -}}

            {{- /* Get the current count for this environment-version group */ -}}
            {{- $currentCount := get $groupCounts $baseKey -}}

            {{- /* Calculate letter index (which increments after every 2 clusters) */ -}}
            {{- $letterIndex := div $currentCount 2 -}}
            {{- /* Get the actual letter to use */ -}}
            {{- $groupLetter := index $letters $letterIndex -}}

            {{- /* Create final group name */ -}}
            {{- $groupName := printf "%s" $groupLetter -}}
            {{- $groupNameEnv := printf "%s-%s" $env $groupLetter -}}

            {{- /* Increment the counter in the map */ -}}
            {{- $_ := set $groupCounts $baseKey (add $currentCount 1) }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cluster-{{ $globalIndex }}
  namespace: {{ $root.Values.argocd.namespace }}
  labels:
    clusterName: cluster-{{ $globalIndex }}
    organization: {{ $org }}
    org: {{ $org }}
    cloud: {{ $cloud }}
    {{- if eq $cloud "aws" }}
    provider: eks
    karpenterEnabled: 'true'
    {{- end }}
    {{- if eq $cloud "azure" }}
    provider: aks
    {{- end }}
    {{- if eq $cloud "gcp" }}
    provider: gke
    {{- end }}
    region: {{ $region }}
    location: {{ $region }}
    environment: {{ $env }}
    kubernetesVersion: {{ $version }}
    group: {{ $groupNameEnv }}
    maintenanceGroup: {{ $groupName }}
    # add extra labels from values.yaml
    {{- range $key, $value := $root.Values.extraLabels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  annotations:
    # add extra annotations from values.yaml
    {{- range $key, $value := $root.Values.extraAnnotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    clusterName: cluster-{{ $globalIndex }}
    region: {{ $region }}
    # Generate a unique identifier for each combination
    combinationId: "{{ $orgIndex }}-{{ $cloudIndex }}-{{ $regionIndex }}-{{ $envIndex }}-{{ $versionIndex }}"
    combinationName: "{{ $org }}-{{ $cloud }}-{{ $region }}-{{ $env }}-{{ $version | replace "." "-" }}"
    versionLetter: {{ $groupLetter }}
    clusterCountInVersion: {{ $currentCount | quote }}
    letterIndex: {{ $letterIndex | quote }}
spec:
  project: {{ $root.Values.argocd.project }}
  sources:
    - chart: vcluster
      repoURL: {{ $root.Values.vcluster.repoURL }}
      targetRevision: {{ $root.Values.vcluster.targetRevision }}
      helm:
        valuesObject:
          sync:
            fromHost:
              nodes:
                enabled: true # Required for virtualScheduler
          controlPlane:
            distro:
              k8s:
                enabled: true
                version: {{ $version }}
            advanced:
              virtualScheduler: # For Keptn support: https://keptn.sh/stable/docs/installation/configuration/vcluster/
                enabled: true
            proxy:
              extraSANs:
              - cluster-{{ $globalIndex }}.cnoe.localtest.me
            statefulSet:
              scheduling:
                podManagementPolicy: OrderedReady
            ingress:
              enabled: true
              host: cluster-{{ $globalIndex }}.cnoe.localtest.me
              spec:
                ingressClassName: nginx
          exportKubeConfig:
            server: https://cluster-{{ $globalIndex }}.cnoe.localtest.me:443
    - repoURL: {{ $root.Values.externalSecretsVcluster.repoURL }}
      targetRevision: {{ $root.Values.externalSecretsVcluster.targetRevision }}
      path: {{ $root.Values.externalSecretsVcluster.path }}
      helm:
        valuesObject:
          clusterName: cluster-{{ $globalIndex }}
          secretName: vc-cluster-{{ $globalIndex }}
          server: https://cluster-{{ $globalIndex }}.cnoe.localtest.me:443
          labels:
            clusterName: cluster-{{ $globalIndex }}
            organization: {{ $org }}
            org: {{ $org }}
            cloud: {{ $cloud }}
            {{- if eq $cloud "aws" }}
            provider: eks
            karpenterEnabled: 'true'
            {{- end }}
            {{- if eq $cloud "azure" }}
            provider: aks
            {{- end }}
            {{- if eq $cloud "gcp" }}
            provider: gke
            {{- end }}
            region: {{ $region }}
            location: {{ $region }}
            environment: {{ $env }}
            kubernetesVersion: {{ $version }}
            group: {{ $groupNameEnv }}
            maintenanceGroup: {{ $groupName }}
            # add extra labels from values.yaml
            {{- range $key, $value := $root.Values.extraLabels }}
            {{ $key }}: {{ $value | quote }}
            {{- end }}
          annotations:
            # add extra annotations from values.yaml
            {{- range $key, $value := $root.Values.extraAnnotations }}
            {{ $key }}: {{ $value | quote }}
            {{- end }}
            clusterName: cluster-{{ $globalIndex }}
            region: {{ $region }}
            # Generate a unique identifier for each combination
            combinationId: "{{ $orgIndex }}-{{ $cloudIndex }}-{{ $regionIndex }}-{{ $envIndex }}-{{ $versionIndex }}"
            combinationName: "{{ $org }}-{{ $cloud }}-{{ $region }}-{{ $env }}-{{ $version | replace "." "-" }}"
            versionLetter: {{ $groupLetter }}
            clusterCountInVersion: {{ $currentCount | quote }}
            letterIndex: {{ $letterIndex | quote }}
  destination:
    namespace:  cluster-{{ $globalIndex }}
    server: {{ $root.Values.argocd.destination.server }}
  syncPolicy:
    automated: {}
    syncOptions:
    - CreateNamespace=true

            {{- $globalIndex = add $globalIndex 1 -}}
          {{- end -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
